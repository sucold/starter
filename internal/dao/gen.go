// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q         = new(Query)
	Bin       *bin
	Country   *country
	File      *file
	Token     *token
	Transform *transform
	User      *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Bin = &Q.Bin
	Country = &Q.Country
	File = &Q.File
	Token = &Q.Token
	Transform = &Q.Transform
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:        db,
		Bin:       newBin(db, opts...),
		Country:   newCountry(db, opts...),
		File:      newFile(db, opts...),
		Token:     newToken(db, opts...),
		Transform: newTransform(db, opts...),
		User:      newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Bin       bin
	Country   country
	File      file
	Token     token
	Transform transform
	User      user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:        db,
		Bin:       q.Bin.clone(db),
		Country:   q.Country.clone(db),
		File:      q.File.clone(db),
		Token:     q.Token.clone(db),
		Transform: q.Transform.clone(db),
		User:      q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.clone(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.clone(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:        db,
		Bin:       q.Bin.replaceDB(db),
		Country:   q.Country.replaceDB(db),
		File:      q.File.replaceDB(db),
		Token:     q.Token.replaceDB(db),
		Transform: q.Transform.replaceDB(db),
		User:      q.User.replaceDB(db),
	}
}

type queryCtx struct {
	Bin       *binDo
	Country   *countryDo
	File      *fileDo
	Token     *tokenDo
	Transform *transformDo
	User      *userDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Bin:       q.Bin.WithContext(ctx),
		Country:   q.Country.WithContext(ctx),
		File:      q.File.WithContext(ctx),
		Token:     q.Token.WithContext(ctx),
		Transform: q.Transform.WithContext(ctx),
		User:      q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
