// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/hinego/systemd/internal/model"
)

func newCountry(db *gorm.DB, opts ...gen.DOOption) country {
	_country := country{}

	_country.countryDo.UseDB(db, opts...)
	_country.countryDo.UseModel(&model.Country{})

	tableName := _country.countryDo.TableName()
	_country.ALL = field.NewAsterisk(tableName)
	_country.ID = field.NewInt64(tableName, "id")
	_country.CreatedAt = field.NewInt64(tableName, "created_at")
	_country.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_country.Country = field.NewString(tableName, "country")
	_country.Country2 = field.NewString(tableName, "country2")
	_country.Country3 = field.NewString(tableName, "country3")
	_country.CountryCn = field.NewString(tableName, "country_cn")
	_country.Emoji = field.NewString(tableName, "emoji")
	_country.Logo = field.NewString(tableName, "logo")
	_country.Symbol = field.NewString(tableName, "symbol")
	_country.Pass = field.NewString(tableName, "pass")

	_country.fillFieldMap()

	return _country
}

type country struct {
	countryDo

	ALL       field.Asterisk
	ID        field.Int64
	CreatedAt field.Int64
	UpdatedAt field.Int64
	Country   field.String
	Country2  field.String
	Country3  field.String
	CountryCn field.String
	Emoji     field.String
	Logo      field.String
	Symbol    field.String
	Pass      field.String

	fieldMap map[string]field.Expr
}

func (c country) Table(newTableName string) *country {
	c.countryDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c country) As(alias string) *country {
	c.countryDo.DO = *(c.countryDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *country) updateTableName(table string) *country {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.CreatedAt = field.NewInt64(table, "created_at")
	c.UpdatedAt = field.NewInt64(table, "updated_at")
	c.Country = field.NewString(table, "country")
	c.Country2 = field.NewString(table, "country2")
	c.Country3 = field.NewString(table, "country3")
	c.CountryCn = field.NewString(table, "country_cn")
	c.Emoji = field.NewString(table, "emoji")
	c.Logo = field.NewString(table, "logo")
	c.Symbol = field.NewString(table, "symbol")
	c.Pass = field.NewString(table, "pass")

	c.fillFieldMap()

	return c
}

func (c *country) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *country) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 11)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["country"] = c.Country
	c.fieldMap["country2"] = c.Country2
	c.fieldMap["country3"] = c.Country3
	c.fieldMap["country_cn"] = c.CountryCn
	c.fieldMap["emoji"] = c.Emoji
	c.fieldMap["logo"] = c.Logo
	c.fieldMap["symbol"] = c.Symbol
	c.fieldMap["pass"] = c.Pass
}

func (c country) clone(db *gorm.DB) country {
	c.countryDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c country) replaceDB(db *gorm.DB) country {
	c.countryDo.ReplaceDB(db)
	return c
}

type countryDo struct{ gen.DO }

func (c countryDo) Debug() *countryDo {
	return c.withDO(c.DO.Debug())
}

func (c countryDo) WithContext(ctx context.Context) *countryDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c countryDo) ReadDB() *countryDo {
	return c.Clauses(dbresolver.Read)
}

func (c countryDo) WriteDB() *countryDo {
	return c.Clauses(dbresolver.Write)
}

func (c countryDo) Session(config *gorm.Session) *countryDo {
	return c.withDO(c.DO.Session(config))
}

func (c countryDo) Clauses(conds ...clause.Expression) *countryDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c countryDo) Returning(value interface{}, columns ...string) *countryDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c countryDo) Not(conds ...gen.Condition) *countryDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c countryDo) Or(conds ...gen.Condition) *countryDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c countryDo) Select(conds ...field.Expr) *countryDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c countryDo) Where(conds ...gen.Condition) *countryDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c countryDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *countryDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c countryDo) Order(conds ...field.Expr) *countryDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c countryDo) Distinct(cols ...field.Expr) *countryDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c countryDo) Omit(cols ...field.Expr) *countryDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c countryDo) Join(table schema.Tabler, on ...field.Expr) *countryDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c countryDo) LeftJoin(table schema.Tabler, on ...field.Expr) *countryDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c countryDo) RightJoin(table schema.Tabler, on ...field.Expr) *countryDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c countryDo) Group(cols ...field.Expr) *countryDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c countryDo) Having(conds ...gen.Condition) *countryDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c countryDo) Limit(limit int) *countryDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c countryDo) Offset(offset int) *countryDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c countryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *countryDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c countryDo) Unscoped() *countryDo {
	return c.withDO(c.DO.Unscoped())
}

func (c countryDo) Create(values ...*model.Country) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c countryDo) CreateInBatches(values []*model.Country, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c countryDo) Save(values ...*model.Country) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c countryDo) First() (*model.Country, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Country), nil
	}
}

func (c countryDo) Take() (*model.Country, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Country), nil
	}
}

func (c countryDo) Last() (*model.Country, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Country), nil
	}
}

func (c countryDo) Find() ([]*model.Country, error) {
	result, err := c.DO.Find()
	return result.([]*model.Country), err
}

func (c countryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Country, err error) {
	buf := make([]*model.Country, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c countryDo) FindInBatches(result *[]*model.Country, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c countryDo) Attrs(attrs ...field.AssignExpr) *countryDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c countryDo) Assign(attrs ...field.AssignExpr) *countryDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c countryDo) Joins(fields ...field.RelationField) *countryDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c countryDo) Preload(fields ...field.RelationField) *countryDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c countryDo) FirstOrInit() (*model.Country, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Country), nil
	}
}

func (c countryDo) FirstOrCreate() (*model.Country, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Country), nil
	}
}

func (c countryDo) FindByPage(offset int, limit int) (result []*model.Country, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c countryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c countryDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c countryDo) Delete(models ...*model.Country) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *countryDo) withDO(do gen.Dao) *countryDo {
	c.DO = *do.(*gen.DO)
	return c
}
