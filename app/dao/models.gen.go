// Code generated by github.com/hinego/gen. DO NOT EDIT.
// Code generated by github.com/hinego/gen. DO NOT EDIT.
// Code generated by github.com/hinego/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"github.com/hinego/gen"
	"github.com/hinego/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newModel(db *gorm.DB, opts ...gen.DOOption) model {
	_model := model{}

	_model.modelDo.UseDB(db, opts...)
	_model.modelDo.UseModel(&model.Model{})

	tableName := _model.modelDo.TableName()
	_model.ALL = field.NewAsterisk(tableName)
	_model.ID = field.NewInt64(tableName, "id")
	_model.CreatedAt = field.NewInt64(tableName, "created_at")
	_model.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_model.fillFieldMap()

	return _model
}

type model struct {
	modelDo

	ALL       field.Asterisk
	ID        field.Int64
	CreatedAt field.Int64
	UpdatedAt field.Int64

	fieldMap map[string]field.Expr
}

func (m model) Table(newTableName string) *model {
	m.modelDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m model) As(alias string) *model {
	m.modelDo.DO = *(m.modelDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *model) updateTableName(table string) *model {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.CreatedAt = field.NewInt64(table, "created_at")
	m.UpdatedAt = field.NewInt64(table, "updated_at")

	m.fillFieldMap()

	return m
}

func (m *model) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *model) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 3)
	m.fieldMap["id"] = m.ID
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
}

func (m model) clone(db *gorm.DB) model {
	m.modelDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m model) replaceDB(db *gorm.DB) model {
	m.modelDo.ReplaceDB(db)
	return m
}

type modelDo struct{ gen.DO }

func (m modelDo) Debug() *modelDo {
	return m.withDO(m.DO.Debug())
}

func (m modelDo) WithContext(ctx context.Context) *modelDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m modelDo) ReadDB() *modelDo {
	return m.Clauses(dbresolver.Read)
}

func (m modelDo) WriteDB() *modelDo {
	return m.Clauses(dbresolver.Write)
}

func (m modelDo) Session(config *gorm.Session) *modelDo {
	return m.withDO(m.DO.Session(config))
}

func (m modelDo) Clauses(conds ...clause.Expression) *modelDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m modelDo) Returning(value interface{}, columns ...string) *modelDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m modelDo) Not(conds ...gen.Condition) *modelDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m modelDo) Or(conds ...gen.Condition) *modelDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m modelDo) Select(conds ...field.Expr) *modelDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m modelDo) Where(conds ...gen.Condition) *modelDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m modelDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *modelDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m modelDo) Order(conds ...field.Expr) *modelDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m modelDo) Distinct(cols ...field.Expr) *modelDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m modelDo) Omit(cols ...field.Expr) *modelDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m modelDo) Join(table schema.Tabler, on ...field.Expr) *modelDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m modelDo) LeftJoin(table schema.Tabler, on ...field.Expr) *modelDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m modelDo) RightJoin(table schema.Tabler, on ...field.Expr) *modelDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m modelDo) Group(cols ...field.Expr) *modelDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m modelDo) Having(conds ...gen.Condition) *modelDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m modelDo) Limit(limit int) *modelDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m modelDo) Offset(offset int) *modelDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m modelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *modelDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m modelDo) Unscoped() *modelDo {
	return m.withDO(m.DO.Unscoped())
}

func (m modelDo) Create(values ...*model.Model) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m modelDo) CreateInBatches(values []*model.Model, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m modelDo) Save(values ...*model.Model) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m modelDo) First() (*model.Model, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Model), nil
	}
}

func (m modelDo) Take() (*model.Model, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Model), nil
	}
}

func (m modelDo) Last() (*model.Model, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Model), nil
	}
}

func (m modelDo) Find() ([]*model.Model, error) {
	result, err := m.DO.Find()
	return result.([]*model.Model), err
}

func (m modelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Model, err error) {
	buf := make([]*model.Model, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m modelDo) FindInBatches(result *[]*model.Model, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m modelDo) Attrs(attrs ...field.AssignExpr) *modelDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m modelDo) Assign(attrs ...field.AssignExpr) *modelDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m modelDo) Joins(fields ...field.RelationField) *modelDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m modelDo) Preload(fields ...field.RelationField) *modelDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m modelDo) FirstOrInit() (*model.Model, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Model), nil
	}
}

func (m modelDo) FirstOrCreate() (*model.Model, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Model), nil
	}
}

func (m modelDo) FindByPage(offset int, limit int) (result []*model.Model, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m modelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m modelDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m modelDo) Delete(models ...*model.Model) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *modelDo) withDO(do gen.Dao) *modelDo {
	m.DO = *do.(*gen.DO)
	return m
}
